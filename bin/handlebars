#!/usr/bin/env node

var yargs = require('yargs')
    .usage('Precompile handlebar templates.\nUsage: $0 [template|directory]...', {
      'f': {
        'type': 'string',
        'description': 'Output File',
        'alias': 'output'
      },
      'map': {
        'type': 'string',
        'description': 'Source Map File'
      },
      'a': {
        'type': 'boolean',
        'description': 'Exports amd style (require.js)',
        'alias': 'amd'
      },
      'c': {
        'type': 'string',
        'description': 'Exports CommonJS style, path to Handlebars module',
        'alias': 'commonjs',
        'default': null
      },
      'h': {
        'type': 'string',
        'description': 'Path to handlebar.js (only valid for amd-style)',
        'alias': 'handlebarPath',
        'default': ''
      },
      'k': {
        'type': 'string',
        'description': 'Known helpers',
        'alias': 'known'
      },
      'o': {
        'type': 'boolean',
        'description': 'Known helpers only',
        'alias': 'knownOnly'
      },
      'm': {
        'type': 'boolean',
        'description': 'Minimize output',
        'alias': 'min'
      },
      'n': {
        'type': 'string',
        'description': 'Template namespace',
        'alias': 'namespace',
        'default': 'Handlebars.templates'
      },
      's': {
        'type': 'boolean',
        'description': 'Output template function only.',
        'alias': 'simple'
      },
      'N': {
        'type': 'string',
        'description': 'Name of passed string templates. Optional if running in a simple mode. Required when operating on multiple templates.',
        'alias': 'name'
      },
      'i': {
        'type': 'string',
        'description': 'Generates a template from the passed CLI argument.\n"-" is treated as a special value and causes stdin to be read for the template value.',
        'alias': 'string'
      },
      'r': {
        'type': 'string',
        'description': 'Template root. Base value that will be stripped from template names.',
        'alias': 'root'
      },
      'p': {
        'type': 'boolean',
        'description': 'Compiling a partial template',
        'alias': 'partial'
      },
      'd': {
        'type': 'boolean',
        'description': 'Include data when compiling',
        'alias': 'data'
      },
      'e': {
        'type': 'string',
        'description': 'Template extension.',
        'alias': 'extension',
        'default': 'handlebars'
      },
      'b': {
        'type': 'boolean',
        'description': 'Removes the BOM (Byte Order Mark) from the beginning of the templates.',
        'alias': 'bom'
      },
      'v': {
        'type': 'boolean',
        'description': 'Prints the current compiler version',
        'alias': 'version'
      },
      'w': {
        'type': 'boolean',
        'description': 'Watch the input file(s)/dir(s) and perform precompilation on changes.',
        'alias': 'watch'
      },

      'help': {
        'type': 'boolean',
        'description': 'Outputs this message'
      }
    })

    .wrap(120);


var argv = yargs.argv;
argv.files = argv._;
delete argv._;

var Precompiler = require('../dist/cjs/precompiler');
function precompile(mArgv) {
  Precompiler.loadTemplates(mArgv ? mArgv : argv, function(err, opts) {
    if (err) {
      throw err;
    }

    if (opts.help || (!opts.templates.length && !opts.version)) {
      yargs.showHelp();
    } else {
      Precompiler.cli(opts);
    }
  });
}

const c = require('colors');
const files = argv.files;
const log = console.log;
let firstTime = true;
if (files.length && argv.w) {
  const chokidar = require('chokidar');
  const DS = '/'; // require('path').sep;
  const G = '**/*.';
  const ext = argv.e ? argv.e : 'handlebars';
  const toWatch = [];
  files.forEach((i, x, a) => {
      if ( !i.endsWith(ext) ) { // is dir
          const glob = i.endsWith(DS) ? G : `${DS}${G}`;
          toWatch.push(i + glob + ext);
      } else {
          toWatch.push(i);
      }
  });
  const watcher = chokidar.watch(toWatch, {ignored: /[\/\\]\./, persistent: true});
  
  watcher
      .on('ready', function () {
        firstTime = false;
        precompile();
        log( c.magenta.bold('Initial output file:', c.white.bgMagenta(argv.f), 'is created.') );
        log( c.blue.bold('Watching', c.white.bgBlue(files.join('  &  ')), 'for changes...') );
      })
      .on('add', path => {
        log( c.green.bold('File added:'), path );
		precompile();
        msg();
      })
      .on('addDir', path => {
        log( c.black.bgGreen('Folder added:'), path );
		precompile();
        msg();
      })
      .on('unlink', path => {
        log( c.red.bold('File removed:'), path );
		precompile();
        msg();
      })
      .on('unlinkDir', path => {
        log( c.white.bgRed('Folder removed:'), path );
        precompile();
        msg();
      })
      .on('change', path => {
        log( c.cyan.bold('File changed:'), path );
        precompile();
        msg();
      });
} else {
  precompile();
}

function msg() {
  if (!firstTime) {
    log( c.yellow.bold('Output file:', c.white.bold.bgMagenta(argv.f), 'was recreated.') );
  }
}